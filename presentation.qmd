---
title: "An Introduction to Shiny"
subtitle: "A hands-on workshop"
author: Andreas M. Brandmaier and Leonie Hagitte
format: 
  revealjs:
    theme: [simple, style.css] #  “simple”, “dark”, “black”, “sky”, “beige”, “serif”, “solarized”, “blood”, “moon”, “night”, “league”, or  “white”
    footer: "6th ESLR Workshop, 2023: Social Learning in Complex Systems"
    highlight-style: a11y
    revealjs-plugins:
    - countdown
editor: visual
date: "July 2023"
---

# Welcome

## Ask questions anytime

![](images/undraw_Engineering_team_a7n2.png)


## Shiny

> Shiny is an R package that makes it easy to build interactive web apps in R

::: columns
::: {.column width="60%"}
Apps can be

- standalone, 
- deployed to a website, 
- or be part of an interactive (Markdown) document
:::

::: {.column width="40%"}
![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/shiny.png)
:::
:::

## Required software

You need to install these software packages in order to follow along with the examples of today:

-   **R**: https://cran.r-project.org
-   **RStudio**: https://posit.co/download/rstudio-desktop/
-   **shiny**
-   **tidyverse packages** (and some others)

```{r eval=FALSE, echo=TRUE}
install.packages(c("shiny","tidyverse", "shinydashboard","palmerpenguins"))
```

## What to expect

::: columns
::: {.column width="60%"}
::: {.r-fit-text}
-   This is a hands-on workshop; you'll get the most out of it if you download the materials and actively participate
-   Introductory R coding skills are OK! We have exercises at varying levels of proficiency
-   The workshop materials remain open and accessible after the workshop
-   Feel free to team up!
:::
:::

::: {.column width="30%"}
![](images/undraw_Cooking_p7m1.png)
:::
:::

# Goals

## Objectives of today

::: incremental
-   Learn about the structure of a shiny application.

-   Learn how to create shiny apps from a template.

-   Learn how to think in terms of *inputs* and *outputs*.

-   Write your own app (using simulated data, real data or *your* data)
:::

## Content

Let's talk about...

::: incremental
-   User-interface / Layout
-   Reactivity / Logic
-   Awesome visualizations
:::

## Anatomy of a Shiny app

```{r shiny-anatomy}
#| eval: false
#| echo: true
#| code-line-numbers: "|1|3,6|4"
library(shiny)

shinyApp(
  ui = list(),
  server = function(input, output, session) {  }
)
shinyApp(ui, server)
```

The `ui` specifies the *visible* user interface

-   Dynamic elements *inputs* and *outputs*
-   Static elements like headings, text, static images
-   A layout how to arrange these things

## Anatomy of a Shiny app

```{r shiny-anatomy-cont}
#| eval: false
#| echo: true
#| code-line-numbers: "5|7"
library(shiny)

shinyApp(
  ui = list(),
  server = function(input, output, session) {  }
)
shinyApp(ui, server)
```

The `server` is *invisible* and is responsible for all computations

-   The `server` monitors *inputs*
-   When inputs change, *outputs* are updated (*reactivity*)

# User-interface

## Shiny Widgets Gallery

::: {style="text-align: center"}
[shiny.rstudio.com/gallery/widget-gallery.html](https://shiny.rstudio.com/gallery/widget-gallery.html)
:::

<iframe data-src="https://shiny.rstudio.com/gallery/widget-gallery.html" width="100%" height="500px" style="border:1px solid;border-radius: 5px;">

</iframe>

## Example

Inputs have unique ids that correspond to server-side variables, a label, a starting value and extra options (e.g., range restrictions, etc.)

`textInput(inputId="familyname", label="Family name:",  value="Steve Miller"  )`

or

`numericInput(inputId="age", label="Age (in years):",  value=1, min=0, max=150 )`

On the server, we will be able to access variables `input$familyname` and `input$age`

# Layout

## Sidebar layout

![](images/sidebar.png){fig-align="center" width="75%"}

::: aside
From [Mastering Shiny](https://mastering-shiny.org/action-layout.html#page-with-sidebar)
:::

## Multi-row layout

![](images/multirow.png){fig-align="center" width="75%"}

::: aside
From [Mastering Shiny](https://mastering-shiny.org/action-layout.html#multi-row)
:::

## Other layouts

Many more, e.g. Tabsets - see `tabsetPanel()`

![](images/tabset.png){fig-align="center" width="75%"}

::: aside
From [Mastering Shiny](https://mastering-shiny.org/action-layout.html#multi-row)
:::

## Outputs

Example output elements (placeholders for dynamic content):

-   `textOutput()` or `htmlOutput()`
-   `plotOutput()`
-   `tableOutput()`

You can use

```{r, echo = TRUE}
help.search("Output", package = "shiny")
```

to find other output functions in shiny.

## Outputs and Renderers

Each `*Output()` function has a corresponding `render*()` server-side function. For example:

-   `textOutput()` $\rightarrow$ `renderText()`
-   `plotOutput()` $\rightarrow$ `renderPlot()`
-   `tableOutput()` $\rightarrow$ `renderTable()`

## Server logic: Accessing inputs

```{r shiny-anatomy-cont-repeat}
#| eval: false
#| echo: true
#| code-line-numbers: "3"
shinyApp(
  ui = list(),
  server = function(input, output, session) {  }
)
```

-   Inputs are accessed in the *server* function via the *input* argument.

-   Inputs are *reactive*, meaning that changes trigger updates to outputs.

# Example: A pocket calculator

## Demo 1 - Plus One

Demo: We write a simple calculator that adds +1 to a number we enter.

The simplest structure of a reactive program involves just a source and an endpoint:

```{mermaid}
flowchart LR
  subgraph outputs
  re([result])
  end
  subgraph inputs
  n1([number]) 
  end
  n1 --> re
```

## Demo 1 - Plus One

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `R/demo1.R`
:::

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|4-22|12-13|18-19|25-30|27-29"
#| file: "R/demo1.R"
```

## Seeking AI help

::: columns
::: {.column width="60%"}

Large language models are great companions for programming

Here is a ChatGPT link (requires Microsoft or Google account) to
answer your questions (but please ask us as well any time)

[ChatGPT companion for Shiny](https://chat.openai.com/share/53d04b51-fae0-481a-8eca-02469a84de4d
)

:::
::: {.column width="40%"}

![](images/chatgpt-screenshot.png)
:::
:::

## Your turn - Exercise 1

Copy the code from the previous slide (or open `R/demo1.R`) and run it in R

Check that you are able successfully run the shiny app and are able to interact with it.

-   If everything is working try modifying the code (e.g. try adding a second number input and change the logic so that both numbers are added).

<countdown time="300"/>

## Reactive diagram

The reactive diagram of this solution shows two inputs and one output:

```{mermaid}
flowchart LR
  subgraph outputs
  re([result])
  end
  subgraph inputs
  n1([number1]) 
  n2([number2]) 
  end
  n1 --> re
  n2 --> re
```

## Solution

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `R/solution1_1.R`
:::

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|4-22|12-13|18-19|25-30|27-29"
#| file: "R/solution1_1.R"
```

## Your Turn - Exercise 2

-   Continue with your code (or from `R/solution1_1.R`) and add a menu to choose different operators (e.g., plus, minus, ...)

-   For example, add a `selectInput(inputId, label, choices)`

-   Add server-side logic to implement the different operators

## Reactive diagram

```{mermaid}
flowchart LR
  subgraph outputs
  re([result])
  end
  subgraph inputs
  n1([number1]) 
  n2([number2]) 
  op([operator])
  end
  n1 --> re
  n2 --> re
  op --> re
```

## Solution

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `R/solution1_2.R`
:::

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|12-16|29-36"
#| file: "R/solution1_2.R"
```

## Formatting text

We can use HTML elements to style text. E.g., <b>Bold</b> or <i>Italics</i>,<h1>First-level heading</h> <h2>Second-level heading</h2>, ...

In UI as static or dynamic elements:

```{r eval=FALSE}
    h2("Title"),
    htmlOutput(outputId = "result")
```

On the server:
```{r eval=FALSE}
output$result <- renderText({ "<h2>Headline</h2>" })
```

## Solution

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `R/solution1_3.R`
:::

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|12-16|29-36"
#| file: "R/solution1_3.R"
```

# Who doesn't like penguins?

![](https://github.com/allisonhorst/palmerpenguins/raw/main/man/figures/lter_penguins.png)

::: aside
Artwork by \@allison_horst
:::

## Palmer Penguins

We are going to use the `penguins` dataset from `palmerpenguins`

```{r}
library(palmerpenguins)

knitr::kable(head(penguins))
```

## Reactive expression

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `R/challenge2.R`
:::

::: code-half
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|9|12-15|18-22|27-42|29-33|35-37|39-41"
#| file: "R/challenge2.R"
```
:::

## Reactive diagram

```{mermaid}
flowchart LR
  subgraph outputs
  pl1([plot1])
  pl2([plot2])
  tx1([text1])
  end
  subgraph inputs
  slider1([slider1]) 
  n1([number1]) 
  rn1([range1])
  ck1([ck1])
  end

```

## Your Turn - Exercise 3

Copy the code from the previous slide (or open `R/challenge2.R`) and run it in R

Add logic to create a second plot as output `plot2` on the server

Add extra features to make the diagrams interactive with additional inputs (e.g., add a `selectInput` for subgroup selection of penguin species) or add a `rangeInput` to display only certain ranges of years, or make point size adjustable by a given variable (`selectInput` or a `checkboxInput`).

<countdown time="1200"/>

## DRY - Don't repeat yourself

- Assume a range input (`sliderInput(value=c(0,10))`) that filters data

- Filter logic should be executed only once for every relevant output

- Never copy&paste server logic, instead use a `reactive` element (here: `compute`):

```{mermaid}
flowchart LR
  subgraph outputs
  pl1([plot1])
  pl2([plot2])
  tx1([text1])
  end
  comp([compute])
  subgraph inputs
  slider1([slider1]) 
  n1([number1]) 
  rn1([range1])
  ck1([ck1])
  end
  compute --> pl1
  compute --> pl2
  rn1 --> compute
  n1 --> pl1

```

## Reactives

Their primary use is similar to a function in an R script, they help to

-   avoid repeating yourself

-   decompose complex computations into smaller / more modular steps

-   can improve computational efficiency by breaking up / simplifying reactive dependencies

## DRY - Solution

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `R/demo3.R`
:::

::: code-half
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|"
#| file: "R/demo3.R"
```
:::

## Deployment

-   Free online deployment at https://www.shinyapps.io/ after registration
-   Free account limited (e.g., 25h operating hours, 5 apps; more plans available)
-   Sharing your app for others to run it locally (e.g., via OSF)
-   Reproducibility! Make sure that everything is contained, no absolute file paths were used (see `here` package) and that all dependencies are loaded

## Dashboards

Package `shinydashboard` has some nice GUI elements for dashboards:

![](images/shinydashboard_box.png)

![](images/shinydashboard_valuebox.png)

## Demo Dashboard

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `R/demo7.R`
:::

::: code-half
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|"
#| file: "R/demo7.R"
```
:::

## Inspiration

::: {.large style="text-align: center"}
[shiny.rstudio.com/gallery/](https://shiny.rstudio.com/gallery/)
:::

> The Shiny User Showcase is comprised of contributions from the Shiny app developer community.

## Thanks

To the extent possible under law and unless otherwise noted, Andreas and Leonie have waived all copyright and related or neighboring rights to this workshop. This work is published from: Deutschland/Germany.

Some parts of this workshop are inspired by work by Colin Rundel (https://github.com/rstudio-conf-2022/get-started-shiny/), which is provided under [https://creativecommons.org/licenses/by/4.0/](Creative%20Commons%20Attribution%204.0%20International%20License).

Andreas (find me on [Twitter](https://www.twitter.com/brandmaier "Twitter"))

Leonie (find me on [LinkedIn](https://www.linkedin.com/in/leonie-hagitte-1130b8231/ "LinkedIn"))